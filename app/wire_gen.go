// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package app

import (
	"github.com/IoTCompetition/IoBack/app/basic"
	"github.com/IoTCompetition/IoBack/app/config"
	"github.com/IoTCompetition/IoBack/app/controllers"
	"github.com/IoTCompetition/IoBack/app/daos"
	"github.com/IoTCompetition/IoBack/app/models"
	"github.com/IoTCompetition/IoBack/app/routers"
	"github.com/IoTCompetition/IoBack/app/utils"
	"net/http"
)

// Injectors from wire.go:

func BuildInjector() *http.Server {
	configType := config.NewConfig()
	writeSyncer := basic.GetLogWriter(configType)
	encoder := basic.GetEncoder()
	logger := basic.NewLogger(configType, writeSyncer, encoder)
	ginx := &utils.Ginx{
		Logger: logger,
	}
	db := basic.NewDB(configType)
	ioTDao := &daos.IoTDao{
		DB:     db,
		Logger: logger,
	}
	ioTModel := &models.IoTModel{
		Logger: logger,
		IoT:    ioTDao,
	}
	ioTController := &controllers.IoTController{
		Logger: logger,
		Util:   ginx,
		IoT:    ioTModel,
	}
	optionDao := &daos.OptionDao{
		DB:     db,
		Logger: logger,
	}
	optionModel := &models.OptionModel{
		Logger: logger,
		Option: optionDao,
	}
	optionController := &controllers.OptionController{
		Logger: logger,
		Util:   ginx,
		Option: optionModel,
	}
	router := &routers.Router{
		InfoAPI:   ioTController,
		OptionAPI: optionController,
	}
	server := NewApp(configType, router)
	return server
}
